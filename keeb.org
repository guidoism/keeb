First we define what we mean by single characters in our own format
(char space+ definition newline). Do this in a code space.

Then we define our keymaps in a nice grid using combinations of
those single characters seperated by whitespace.

Next we define our keyboard as a sequence of columns and rows
or just all of the keys and define how they relate to the grid
we used in our keymaps.

Finally we write the firmware that runs on the keyboard. It should be
specific to our keyboard. We are doing this "inside-out" as compared
to most software these days -- We are writing the firmware ourselves
using help from utility routines to make the code idiomatic. This is
contrasted with the more common approach of providing a framework or
library that you use by way of configuration.


* Debouncing

Simple de-bouncing (take last three and confirm they are all equal)

The assumption is that the wait time between each period in
history is long enough for debouncing. If it isn't then we can
increase the maxlen of the history deque.

#+begin_src python
history = collections.Deque(maxlen=3)
def debounce(keys):
    history.append(keys)
    return [a == b == c for a, b, c in zip(*history)]
#+end_src



#+begin_src python
keys = bitstring()
for w in writers:
    w.value = True
    for r in readers:
        keys.append(r.value())
    w.value = False

# The keys that are currently on    
on = debounce(keys)

switched_off = last - on
switched_on = on - last
last = on



#+end_src

We make decisions as to what is happening based on discrete snapshots
in time of the global state. It can be thought of as a matrix where
the y axis is time and the x axis is the set of keys.

.▪.▪...▪.....
.▪....▪▪.....
.▪....▪▪.....
.▪....▪▪.....
......▪......
......▪......

Then our job is just pattern matching over that matrix, finding the
match with the highest priority.

When we use a set of keys during that window we also take claim to
them for that time period so other potential patterns don't match
if they aren't supposed to.

*** Normal Keypress

A keypress is a sequence of ones followed by a zero.


*** Combos

A combo is when two keys are pressed the same time. But we can be
loose with our definition of "same time", so in we can allow the
key-downs to start within 5 ticks and allow the key-ups to end at
any time after that. And we can have different behaviors depending
on which key-up event happens first.

Actually if we transpose the matrix to be time on the x and keys on
the y then I think we can use regexes really easily to do the
matching, yes? Actually, since it's just boolean values it's now
easy to use a bitstring for each key. If we store 64 values in our
time window, then a single 64 bit word can be compared with another
word. 64 events at 5ms per event is 320ms which I think is probably
good enough.

QMK uses 50ms as the default combo term, which would be 10 quanta in
our system. For example if Key A starts at time 0 and Key B starts at
time 8 and both of them are pressed for an additional 4 quanta then
we will match this as a combo event for the two of them. To prevent
further matches we mask out the two keys during this time period.

We need to also decide whether to fire the key event when the match
happens or whether we wait until one or both of the keys are lifted.

High-level overview:

1. Get the set of keys that have at least one down event recorded
   (i.e., they aren't just zeros).

2. Loop over each of the configured combos sorted in order of
   most keys in the combo first.

3. Determine if the keys overlap for the minimum amount. If the
   minimum amount is 10 quanta then we want to make sure there is a
   sequence of 10 on bits -- 11 1111 1111 (1024) -- in common. Can can
   shift, mask, and AND to determine if this is true.

4. TODO: Look for a series of ones in front of one of them that extends
   for too long?

* Utility Routines

#+begin_src python
def bits(bs):
    """Converts the handy '▪.' bitstring format into a list of 0s and 1s.    
    """
    B = {'▪': 1, '.': 0}
    return [B[b] for b in bs]


def key_press(key, context, action):
    """Returns True if the key in the context was pressed.

    Side-effects include clearing out this event from the context
    and firing the provided action.

    >>> c = [bits('...▪▪.', '....▪.')]
    >>> c
    [[0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 0]]
    >>> key_press(0, c, lambda k: print(f'Pressed {k}'))
    Pressed 0
    >>> c
    [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0]]
    """
    pass
    
#+end_src





